apply plugin: "java"

compileJava {
    options.encoding = "UTF-8"
    options.compilerArgs += [
            "-Xlint:unchecked", // 미확인 형변환 경고를 활성화합니다.
            "-Xlint:deprecation", // 사용 중단된 API 사용에 대한 경고를 활성화합니다.
    ]
}
compileTestJava.options.encoding = "UTF-8"
javadoc.options.encoding = "UTF-8"

java {
    // 프로젝트에서 사용할 Java 버전을 설정합니다.
    // https://www.perplexity.ai/search/apache-commons-validator-e-dae-oAIBeQ3XRLGsVVL4hWtPRA#13
    toolchain.languageVersion = JavaLanguageVersion.of("${versions.lang.java}")
}

dependencies {
    if (applyLib.lombok) {
        compileOnly "org.projectlombok:lombok:${versions.lib.lombok}"
        annotationProcessor "org.projectlombok:lombok:${versions.lib.lombok}"

        testCompileOnly "org.projectlombok:lombok:${versions.lib.lombok}"
        testAnnotationProcessor "org.projectlombok:lombok:${versions.lib.lombok}"
    }

    if (applyLib.mapstuct) {
        implementation "org.mapstruct:mapstruct:${versions.lib.mapstruct}"
        annotationProcessor "org.mapstruct:mapstruct-processor:${versions.lib.mapstruct}"
        if (applyLib.lombok) {
            // Lombok을 사용하는 경우 추가
            annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"
        }
    }

    if (applyLib.assertj) {
        testImplementation "org.assertj:assertj-core:${versions.lib.assertj}"

        //https://www.perplexity.ai/search/apache-commons-validator-e-dae-oAIBeQ3XRLGsVVL4hWtPRA#10
        testImplementation "net.javacrumbs.json-unit:json-unit-assertj:${versions.lib.jsonUnitAssertj}"

    }
}


// If running from IntelliJ IDEA (such as when importing the project)
if (Boolean.getBoolean("idea.active")) {
    allprojects { project ->
        project.apply plugin: "idea"
        project.plugins.withType(JavaPlugin) {
            project.afterEvaluate {
                project.idea.module {
                    // https://www.perplexity.ai/search/apache-commons-validator-e-dae-oAIBeQ3XRLGsVVL4hWtPRA#15
                    // https://www.perplexity.ai/search/apache-commons-validator-e-dae-oAIBeQ3XRLGsVVL4hWtPRA#16
                    def mainGeneratedSources = project.tasks["compileJava"].options.annotationProcessorGeneratedSourcesDirectory
                    if (mainGeneratedSources) {
                        sourceDirs += mainGeneratedSources
                        generatedSourceDirs += mainGeneratedSources
                    }
                    def testGeneratedSources = project.tasks["compileTestJava"].options.annotationProcessorGeneratedSourcesDirectory
                    if (testGeneratedSources) {
                        testSourceDirs += testGeneratedSources
                        generatedSourceDirs += testGeneratedSources
                    }

                    // Uncomment if you want to do annotation processing in IntelliJ IDEA:
                    // https://www.perplexity.ai/search/apache-commons-validator-e-dae-oAIBeQ3XRLGsVVL4hWtPRA#17
//                    def annotationProcessorConfiguration = configurations.findByName("annotationProcessor")
//                    if (annotationProcessorConfiguration) {
//                        scopes.PROVIDED.plus += annotationProcessorConfiguration
//                    }
//                    def testAnnotationProcessorConfiguration = configurations.findByName("testAnnotationProcessor")
//                    if (testAnnotationProcessorConfiguration) {
//                        scopes.TEST.plus += testAnnotationProcessorConfiguration
//                    }
                }
            }
        }

    }
}